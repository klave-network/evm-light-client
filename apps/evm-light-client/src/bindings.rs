// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_register_routes_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::register_routes();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_light_client_init_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::light_client_init(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_light_client_update_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::light_client_update(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_light_client_update_for_block_number_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::light_client_update_for_block_number(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_light_client_update_for_period_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::light_client_update_for_period(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_light_client_update_for_slot_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::light_client_update_for_slot(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_light_client_fetch_header_from_slot_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::light_client_fetch_header_from_slot(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_light_client_fetch_block_from_slot_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::light_client_fetch_block_from_slot(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_light_client_persist_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::light_client_persist(_rt::string_lift(bytes0));
}
pub trait Guest {
    fn register_routes();
    fn light_client_init(cmd: _rt::String);
    fn light_client_update(cmd: _rt::String);
    fn light_client_update_for_block_number(cmd: _rt::String);
    fn light_client_update_for_period(cmd: _rt::String);
    fn light_client_update_for_slot(cmd: _rt::String);
    fn light_client_fetch_header_from_slot(cmd: _rt::String);
    fn light_client_fetch_block_from_slot(cmd: _rt::String);
    fn light_client_persist(cmd: _rt::String);
}
#[doc(hidden)]
macro_rules! __export_world_evm_light_client_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[export_name = "register-routes"] unsafe extern "C" fn
        export_register_routes() { $($path_to_types)*::
        _export_register_routes_cabi::<$ty > () } #[export_name = "light-client-init"]
        unsafe extern "C" fn export_light_client_init(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_light_client_init_cabi::<$ty > (arg0, arg1) }
        #[export_name = "light-client-update"] unsafe extern "C" fn
        export_light_client_update(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_light_client_update_cabi::<$ty > (arg0, arg1) } #[export_name =
        "light-client-update-for-block-number"] unsafe extern "C" fn
        export_light_client_update_for_block_number(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_light_client_update_for_block_number_cabi::<$ty >
        (arg0, arg1) } #[export_name = "light-client-update-for-period"] unsafe extern
        "C" fn export_light_client_update_for_period(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_light_client_update_for_period_cabi::<$ty > (arg0,
        arg1) } #[export_name = "light-client-update-for-slot"] unsafe extern "C" fn
        export_light_client_update_for_slot(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_light_client_update_for_slot_cabi::<$ty > (arg0,
        arg1) } #[export_name = "light-client-fetch-header-from-slot"] unsafe extern "C"
        fn export_light_client_fetch_header_from_slot(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_light_client_fetch_header_from_slot_cabi::<$ty >
        (arg0, arg1) } #[export_name = "light-client-fetch-block-from-slot"] unsafe
        extern "C" fn export_light_client_fetch_block_from_slot(arg0 : * mut u8, arg1 :
        usize,) { $($path_to_types)*::
        _export_light_client_fetch_block_from_slot_cabi::<$ty > (arg0, arg1) }
        #[export_name = "light-client-persist"] unsafe extern "C" fn
        export_light_client_persist(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_light_client_persist_cabi::<$ty > (arg0, arg1) } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_evm_light_client_cabi;
#[rustfmt::skip]
mod _rt {
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_evm_light_client_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_evm_light_client_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_evm_light_client_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:component:evm-light-client:evm-light-client:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 483] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdc\x02\x01A\x02\x01\
A\x0b\x01@\0\x01\0\x04\0\x0fregister-routes\x01\0\x01@\x01\x03cmds\x01\0\x04\0\x11\
light-client-init\x01\x01\x04\0\x13light-client-update\x01\x01\x04\0$light-clien\
t-update-for-block-number\x01\x01\x04\0\x1elight-client-update-for-period\x01\x01\
\x04\0\x1clight-client-update-for-slot\x01\x01\x04\0#light-client-fetch-header-f\
rom-slot\x01\x01\x04\0\"light-client-fetch-block-from-slot\x01\x01\x04\0\x14ligh\
t-client-persist\x01\x01\x04\0+component:evm-light-client/evm-light-client\x04\0\
\x0b\x16\x01\0\x10evm-light-client\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.220.1\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
